* Emacs Config

Os objetivos desse arquivo de configuração são:
- Criar um arquivo de configuração com somente o que eu necessito, sem contar com um ambiente /bloated/ como o do doom emacs.
- Um ambiente que integra, PKM vindo do obsidian, IDE's para desenvolvimento como minha atual configuração do Neovim.
- Keybindings mneônicos inspirados nos que são implementados no doom emacs e spacemacs.
- Algumas soluções de produtividade como OrgTodo e OrgAgenda
- Criar documentos em que posso usar /literate programming/ como esse aquivo de configuração.
- Criação de notas orientadas por conceito ou método Zettlekasten, meu atual método de anotação utilizado no Obsidian.
- Captura de notas, todos, fontes, ideias e etc. com o mínimo de atrito possível com o OrgCapture
- Linting
- Debugging
- Project switching
- Auto Completion

** TODO
- [ ] Customizar 'evil-undo-system' para funcionalidade de REDO no C-r
- [ ] Entender mais sobre o funcionamento do Magit e configurá-lo


* Startup performance

#+begin_src emacs-lisp

(setq gc-cons-threshold (* 50 1000 1000))

(defun hmvs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'hmvs/display-startup-time)

#+end_src

* Package Manager
A macro [[https://jwiegley.github.io/use-package/][use-package]] permite que usuários isolem as configurações de pacote de forma que auxilia em perfomance e organização do aquivo.

#+begin_src emacs-lisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents (package-refresh-contents))


;; Inicializando use-package em plataformas non-Linux
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* No-Littering

#+begin_src emacs-lisp

(use-package no-littering)

(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* UI

#+begin_src emacs-lisp

(setq inhibit-startup-message t)
(scroll-bar-mode -1)                   ; Disable visible scrollbar
(tool-bar-mode -1)                     ; Disable the toolbar
(tooltip-mode -1)                      ; Disable tooltips
(set-fringe-mode 10)                   ; Give some breathing room
(menu-bar-mode -1)                     ; Disable the menu bar
(setq visible-bell t)                  ; Set up the visible bell
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* TODO Keybindings

** General

Configurações globais e do pacote General.el:

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

As /keybindings/ são prefixadas globalmente com SPC assim como Spacemacs. Além disso após o prefixo espaço os prefixos mneônicos de classes de funcionalidades começam.

Para implementar de forma consistente /keybindings/ entre menus gerais e atalhos para funções específicas de pacotes, foi decidido que declaração de /keybindings/ de alto nível será feita na sessão de configuração do pacote general.el seguindo as tabelas e classes de prefixo abaixo.

As classes de prefixos são:
- "b" - buffer
- "c" - code
- "f" - file
- "g" - git
- "i" - insert
- "n" - notes
- "o" - open
- "p" - project
- "q" - quit/session
- "r" - remote
- "s" - search
- "t" - toggle

*** "b" - buffer

| Key | Descrição                                        | Função                             |
| n   | abre o próximo buffer                            | next-buffer                        |
| p   | abre o buffer anterior                           | previous-buffer                    |
| b   | abre a escolha de buffer                         | switch-to-buffer                   |
| i   | abre o buffer *ibuffer*                          | ibuffer                            |
| c   | abre um clone do atual buffer                    | clone-indirect-buffer              |
| C   | abre um clone do atual buffer em uma nova janela | clone-indirect-buffer-other-window |
| k   | mata o buffer                                    | kill-current-buffer                |

*** "n" - notas

PREFIXO: (SPC - n)

| Key | Descrição                                                      | Função               |
| i   | cria nota se não existe e adiciona link no cursor              | org-roam-node-insert |
| f   | cria nota se não existe e abre o arquivo                       | org-roam-node-find   |
| c   | cria nota se não existe e retorna o contexto quando completado | org-roam-capture     |

*** "p" - project

| Key | Descrição | Função |
|     |           |        |

* IVY
Ferramenta de /autocomplete/ para minibuffers do Emacs.

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src

* IVY Rich
Esse pacote oferece alguns comandos de IVY e Counsel melhorados através de /rich transformers/.

#+begin_src emacs-lisp

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

* All The Icons
Um pacote utilitário que fornece algumas fontes especiais para o Emacs.

#+begin_src emacs-lisp

(use-package all-the-icons)

#+end_src

* Doom Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src

* Temas

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))

#+end_src

* Which-Key

Pacote Emacs que exibe as combinações de teclas disponíveis no minibuffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))

#+end_src

* Helpful

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Undo-Tree

#+begin_src emacs-lisp

(use-package undo-tree
  :ensure t)

#+end_src

* Rainbow Delimeters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Counsel

#+begin_src emacs-lisp

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

#+end_src

* Helpful

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Evil Mode

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

* Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projetos")
    (setq projectile-project-search-path '("~/Projetos")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src

* Counsel Projectile

#+begin_src emacs-lisp

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

* HOLD Magit

#+begin_src emacs-lisp :tangle no

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Dashboard

#+begin_src emacs-lisp

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq dashboard-startup-banner 'official)

(setq dashboard-center-content t)

(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

#+end_src

* Org Mode

#+begin_src emacs-lisp

(defun hmvs/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . hmvs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"))

#+end_src

* Visual Fill column

#+begin_src emacs-lisp

(defun hmvs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . hmvs/org-mode-visual-fill))

#+end_src

* VTerm

#+begin_src emacs-lisp

(use-package vterm
    :ensure t)

#+end_src

* TODO LSP Mode

#+begin_src emacs-lisp :tangle no

(use-package lsp-mode
  :init (setq lsp-keymap-prefix "C-c l")
  :hook (prog-mode-hook . lsp-deferred)
  :commands (lsp lsp-deferred))

#+end_src

* TODO LSP IVY

#+begin_src emacs-lisp :tangle no

(use-package lsp-ivy
  :commands lsp-ivy-workspace-symbol)

#+end_src

* TODO LSP ui

#+begin_src emacs-lisp :tangle no

(use-package lsp-ui
  :commands lsp-ui-mode)

#+end_src

* HOLD DAP Mode

#+begin_src emacs-lisp :tangle no

(use-package dap-mode)

;; para adicionar o adaptador DAP para uma linguage:
;; (use-package dap-LANGUAGE)

#+end_src

* TODO Languages
