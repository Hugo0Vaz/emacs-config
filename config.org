* Emacs Config

Os objetivos desse arquivo de configuração são:
- Criar um arquivo de configuração com somente o que eu necessito, sem contar com um ambiente /bloated/ como o do doom emacs.
- Um ambiente que integra, PKM vindo do obsidian, IDE's para desenvolvimento como minha atual configuração do Neovim.
- Keybindings mneônicos inspirados nos que são implementados no doom emacs e spacemacs.
- Algumas soluções de produtividade como OrgTodo e OrgAgenda
- Criar documentos em que posso usar /literate programming/ como esse aquivo de configuração.
- Criação de notas orientadas por conceito ou método Zettlekasten, meu atual método de anotação utilizado no Obsidian.
- Captura de notas, todos, fontes, ideias e etc. com o mínimo de atrito possível com o OrgCapture
- Linting
- Debugging
- Project switching
- Auto Completion

** TODO
- [ ] Customizar 'evil-undo-system' para funcionalidade de REDO no C-r
- [ ] Entender mais sobre o funcionamento do Magit e configurá-lo

* UI

#+begin_src emacs-lisp

(setq inhibit-startup-message t)
(scroll-bar-mode -1)                   ; Disable visible scrollbar
(tool-bar-mode -1)                     ; Disable the toolbar
(tooltip-mode -1)                      ; Disable tooltips
(set-fringe-mode 10)                   ; Give some breathing room
(menu-bar-mode -1)                     ; Disable the menu bar
(setq visible-bell t)                  ; Set up the visible bell
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Package Manager
A macro [[https://jwiegley.github.io/use-package/][use-package]] permite que usuários isolem as configurações de pacote de forma que auxilia em perfomance e organização do aquivo.

#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents (package-refresh-contents))


;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* IVY

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src

* IVY Rich

#+begin_src emacs-lisp

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

* All The Icons

#+begin_src emacs-lisp

(use-package all-the-icons)

#+end_src

* Doom Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src

* Temas

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))

#+end_src

* Which-Key

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))

#+end_src

* Helpful

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Undo-Tree

#+begin_src emacs-lisp

(use-package undo-tree
  :ensure t)

#+end_src

* Rainbow Delimeters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Counsel

#+begin_src emacs-lisp

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

#+end_src

* Helpful

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Evil Mode

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

* General Keybindings

As /keybindings/ são prefixadas globalmente com SPC assim como Spacemacs. Além disso após o prefixo espaço os prefixos mneônicos de classes de funcionalidades começam.

As classes de prefixos são:
- "b" -> buffer
- "c" -> code
- "f" -> file
- "g" -> git
- "i" -> insert
- "n" -> notas
- "o" -> open
- "p" -> project
- "q" -> quit/session
- "r" -> remote
- "s" -> search
- "t" -> toggle

| Keybind | Descrição |
|         |           |

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projetos")
    (setq projectile-project-search-path '("~/Projetos")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src

* Counsel Projectile

#+begin_src emacs-lisp

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

* TODO Magit

#+begin_src emacs-lisp :tangle no

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Dashboard
* Org Mode

#+begin_src emacs-lisp

(defun hmvs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . hmvs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"))

#+end_src

* Org bullets

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

* Visual Fill column

#+begin_src emacs-lisp

(defun hmvs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . hmvs/org-mode-visual-fill))

#+end_src
